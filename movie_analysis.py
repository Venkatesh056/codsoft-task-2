# -*- coding: utf-8 -*-
"""Movie_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UeWd9PWdKm_t8JtIKAdDPgk_FrVr5f01
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv('/content/IMDb Movies India.csv', encoding='ISO-8859-1')

# Convert 'Year' from object to integer (cleaning non-numeric characters)
df['Year'] = df['Year'].str.extract('(\d{4})').astype(float)

scaler = MinMaxScaler()
df['Rating_Normalized'] = scaler.fit_transform(df[['Rating']])

# Display the transformed data
print("Transformed data (with normalized ratings):")
print(df[['Year', 'Rating', 'Rating_Normalized']].head())

# Already extracted year as part of transformation; let's count movies per year
movies_per_year = df.groupby('Year').size()

print("\nNumber of movies released per year:")
print(movies_per_year)

average_rating_per_year = df.groupby('Year')['Rating'].mean()

print("\nAverage rating per year:")
print(average_rating_per_year)

# Filter movies that are in the Drama genre and have a rating above 8
drama_high_rated = df[(df['Genre'].str.contains('Drama')) & (df['Rating'] > 8)]

print("\nTop Drama movies with rating above 8:")
print(drama_high_rated[['Name', 'Year', 'Rating']].head(10))

import matplotlib.pyplot as plt
import seaborn as sns

# Histogram of movie ratings
plt.figure(figsize=(10, 6))
sns.histplot(df['Rating'].dropna(), bins=20, kde=True)
plt.title('Distribution of Movie Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

# Bar plot of movie counts by genre
plt.figure(figsize=(10, 6))
genre_counts = df['Genre'].value_counts().head(10)
sns.barplot(x=genre_counts, y=genre_counts.index)
plt.title('Top 10 Movie Genres')
plt.xlabel('Number of Movies')
plt.ylabel('Genre')
plt.show()

# Scatter plot of Ratings vs. Votes
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Votes', y='Rating', data=df)
plt.title('Ratings vs. Votes')
plt.xlabel('Votes')
plt.ylabel('Rating')
plt.show()

# Convert 'Votes' to numeric (cleaning any non-numeric characters)
df['Votes'] = pd.to_numeric(df['Votes'].str.replace(',', ''), errors='coerce')

correlation_matrix = df[['Rating', 'Votes', 'Year']].corr()

print("\nCorrelation matrix:")
print(correlation_matrix)

# Visualizing the correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# Example: Extract and clean director names by removing extra spaces
df['Director'] = df['Director'].str.strip()

# Most common words in movie titles
title_words = df['Name'].str.split(expand=True).stack().value_counts().head(10)

print("\nMost common words in movie titles:")
print(title_words)

# Clean and format text columns (removing special characters)
df['Cleaned_Name'] = df['Name'].str.replace(r'[^A-Za-z0-9 ]+', '', regex=True)

print("\nCleaned movie titles:")
print(df[['Name', 'Cleaned_Name']].head(10))

# Pivot table showing average rating per genre
genre_pivot = df.pivot_table(values='Rating', index='Genre', aggfunc='mean')

print("\nPivot table of average rating per genre:")
print(genre_pivot.sort_values(by='Rating', ascending=False).head(10))

# Group by 'Year' and 'Genre' to find the number of movies per genre each year
movies_per_genre_year = df.groupby(['Year', 'Genre']).size().unstack().fillna(0)

print("\nNumber of movies per genre each year:")
print(movies_per_genre_year.head(10))

# Detect outliers in the 'Rating' column using IQR
Q1 = df['Rating'].quantile(0.25)
Q3 = df['Rating'].quantile(0.75)
IQR = Q3 - Q1

outliers = df[(df['Rating'] < (Q1 - 1.5 * IQR)) | (df['Rating'] > (Q3 + 1.5 * IQR))]

print("\nOutliers in the 'Rating' column:")
print(outliers[['Name', 'Rating']])

df_no_outliers = df[~((df['Rating'] < (Q1 - 1.5 * IQR)) | (df['Rating'] > (Q3 + 1.5 * IQR)))]

from sklearn.preprocessing import OneHotEncoder

encoder = OneHotEncoder(sparse=False)
genre_encoded = encoder.fit_transform(df[['Genre']])

genre_encoded_df = pd.DataFrame(genre_encoded, columns=encoder.get_feature_names_out(['Genre']))

df_encoded = pd.concat([df, genre_encoded_df], axis=1)

print("\nDataFrame after one-hot encoding 'Genre':")
print(df_encoded.head())

df_encoded['Director_Year'] = df_encoded['Director'] + '_' + df_encoded['Year'].astype(str)

print("\nDataFrame with new feature 'Director_Year':")
print(df_encoded[['Director', 'Year', 'Director_Year']].head())

# Save the script to a local file in Colab's environment
with open("Movie_analysis.py", "w") as file:
    file.write(script)

print("Script saved as 'Movie_analysis.py' in the Colab environment.")